<?php

namespace LaraFlowAI;

/**
 * Response class represents the result of an agent's task execution.
 * 
 * A response contains the generated content, agent information, tool results,
 * metadata, and execution timing. It provides a structured way to handle
 * and analyze the output from AI agents.
 * 
 * @package LaraFlowAI
 * @author LaraFlowAI Team
 * @version 1.0.0
 * @since 1.0.0
 */
class Response
{
    /**
     * The response content generated by the agent.
     * 
     * @var string
     */
    protected string $content;

    /**
     * The agent that generated the response.
     * 
     * @var string
     */
    protected string $agent;

    /**
     * Results from tool executions.
     * 
     * @var array<string, mixed>
     */
    protected array $toolResults;

    /**
     * Additional metadata for the response.
     * 
     * @var array<string, mixed>
     */
    protected array $metadata;

    /**
     * The timestamp when the response was created.
     * 
     * @var float
     */
    protected float $executionTime;

    /**
     * Create a new Response instance.
     * 
     * @param string $content The response content
     * @param string $agent The agent that generated the response
     * @param array<string, mixed> $toolResults Optional tool execution results
     * @param array<string, mixed> $metadata Optional metadata
     */
    public function __construct(
        string $content,
        string $agent,
        array $toolResults = [],
        array $metadata = []
    ) {
        $this->content = $content;
        $this->agent = $agent;
        $this->toolResults = $toolResults;
        $this->metadata = $metadata;
        $this->executionTime = microtime(true);
    }

    /**
     * Get the response content.
     * 
     * @return string The response content
     */
    public function getContent(): string
    {
        return $this->content;
    }

    /**
     * Get the agent that generated the response.
     * 
     * @return string The agent role
     */
    public function getAgent(): string
    {
        return $this->agent;
    }

    /**
     * Get tool results.
     * 
     * @return array<string, mixed> Array of tool execution results
     */
    public function getToolResults(): array
    {
        return $this->toolResults;
    }

    /**
     * Get tool result for specific tool.
     * 
     * @param string $toolName The name of the tool
     * @return mixed The tool result if found, null otherwise
     */
    public function getToolResult(string $toolName): mixed
    {
        return $this->toolResults[$toolName] ?? null;
    }

    /**
     * Get metadata.
     * 
     * @return array<string, mixed> The response metadata
     */
    public function getMetadata(): array
    {
        return $this->metadata;
    }

    /**
     * Set metadata.
     * 
     * @param array<string, mixed> $metadata The metadata to set
     * @return self Returns the response instance for method chaining
     */
    public function setMetadata(array $metadata): self
    {
        $this->metadata = array_merge($this->metadata, $metadata);
        return $this;
    }

    /**
     * Add a single key-value pair to the metadata.
     * 
     * @param string $key The metadata key
     * @param mixed $value The metadata value
     * @return self Returns the response instance for method chaining
     */
    public function addMetadata(string $key, mixed $value): self
    {
        $this->metadata[$key] = $value;
        return $this;
    }

    /**
     * Get execution time.
     * 
     * @return float The execution time in seconds
     */
    public function getExecutionTime(): float
    {
        return microtime(true) - $this->executionTime;
    }

    /**
     * Check if response has tool results.
     * 
     * @return bool True if response has tool results, false otherwise
     */
    public function hasToolResults(): bool
    {
        return !empty($this->toolResults);
    }

    /**
     * Check if response has specific tool result.
     * 
     * @param string $toolName The name of the tool
     * @return bool True if response has result for the tool, false otherwise
     */
    public function hasToolResult(string $toolName): bool
    {
        return isset($this->toolResults[$toolName]);
    }

    /**
     * Convert response to array.
     * 
     * @return array<string, mixed> The response data as an array
     */
    public function toArray(): array
    {
        return [
            'content' => $this->content,
            'agent' => $this->agent,
            'tool_results' => $this->toolResults,
            'metadata' => $this->metadata,
            'execution_time' => $this->getExecutionTime(),
        ];
    }

    /**
     * Convert response to JSON.
     * 
     * @param int $options JSON encoding options
     * @return string The response as JSON string
     */
    public function toJson(int $options = 0): string
    {
        return json_encode($this->toArray(), $options);
    }

    /**
     * String representation.
     * 
     * @return string The response content as string
     */
    public function __toString(): string
    {
        return $this->content;
    }
}
